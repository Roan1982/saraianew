version: '3.8'

services:
  # Base de datos PostgreSQL
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: sara_db
      POSTGRES_USER: sara_user
      POSTGRES_PASSWORD: sara_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - sara-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sara_user -d sara_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend Django
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    ports:
      - "8000:8000"
    volumes:
      - ./staticfiles:/app/staticfiles
      - ./media:/app/media
    environment:
      - DJANGO_SETTINGS_MODULE=sara.settings
      - DEBUG=True
      - DATABASE_URL=postgresql://sara_user:sara_password@db:5432/sara_db
      - SECRET_KEY=django-insecure-sara-secret-key-2025
      - ALLOWED_HOSTS=localhost,127.0.0.1,backend,0.0.0.0,testserver
      - PYTHONUNBUFFERED=1
    depends_on:
      db:
        condition: service_healthy
    networks:
      - sara-network
    command: >
      sh -c "
        echo 'Esperando a que la base de datos esté lista...' &&
        while ! nc -z db 5432; do sleep 1; done &&
        echo 'Base de datos lista, ejecutando migraciones...' &&
        python manage.py migrate --noinput &&
        python manage.py collectstatic --noinput &&
        echo 'Iniciando servidor Django...' &&
        python manage.py runserver 0.0.0.0:8000
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Cliente Electron (opcional, solo para desarrollo)
  electron:
    build:
      context: .
      dockerfile: Dockerfile.electron
    depends_on:
      backend:
        condition: service_healthy
    environment:
      - DISPLAY=:99
      - API_URL=http://backend:8000/api
      - ELECTRON_DISABLE_SECURITY_WARNINGS=true
      - NODE_ENV=docker
      - DOCKER_CONTAINER=true
    networks:
      - sara-network
    stdin_open: true
    tty: true
    restart: unless-stopped
    # NOTA: La GUI de Electron requiere X11 y solo funciona en Linux
    # Para desarrollo en Windows/Mac, ejecuta el cliente fuera de Docker

  # Nginx (para producción)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./staticfiles:/app/staticfiles:ro
    depends_on:
      - backend
    networks:
      - sara-network
    restart: unless-stopped

networks:
  sara-network:
    driver: bridge

volumes:
  postgres_data:
  staticfiles:
  media: